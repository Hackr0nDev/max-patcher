#THIS IS FOR TESTING PURPOSES DO NOT RUN

name: TESTING DO NOT RUN

on:
  workflow_dispatch:

jobs:
  download-apk:
    runs-on: ubuntu-latest

    env:
      PACKAGE_NAME: ru.oneme.app
      OUT_DIR: source_apk

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare output dir
        run: mkdir -p "$OUT_DIR"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright (Chromium)
        run: |
          npm init -y
          npm i -D playwright@latest
          npx playwright install --with-deps chromium

      - name: Download APK via APKCombo
        shell: bash
        run: |
          cat > fetch-apk.js <<'EOF'
          const { chromium } = require('playwright');
          const fs = require('fs');
          const path = require('path');

          const pkg = process.env.PACKAGE_NAME || 'ru.oneme.app';
          const outDir = process.env.OUT_DIR || 'source_apk';
          const startUrl = `https://apkcombo.com/downloader/?q=${encodeURIComponent(pkg)}&utm_source=chrome-extension`;

          async function trySelectors(page, selectors, timeout = 60000) {
            for (const sel of selectors) {
              const loc = page.locator(sel).first();
              if (await loc.count()) {
                try {
                  const [download] = await Promise.all([
                    page.waitForEvent('download', { timeout }),
                    loc.click({ timeout: 10000 }),
                  ]);
                  return download;
                } catch {
                  try { await page.waitForLoadState('domcontentloaded', { timeout: 10000 }); } catch {}
                }
              }
            }
            return null;
          }

          (async () => {
            fs.mkdirSync(outDir, { recursive: true });

            const browser = await chromium.launch({ headless: true });
            const context = await browser.newContext({
              acceptDownloads: true,
              userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
              locale: 'en-US',
            });
            const page = await context.newPage();

            console.log('Opening:', startUrl);
            await page.goto(startUrl, { waitUntil: 'domcontentloaded', timeout: 120000 });

            let download = await trySelectors(page, [
              'a:has-text("Generate")',
              'button:has-text("Generate")',
              'a:has-text("Download")',
              'button:has-text("Download")',
              'a[href*="/download"]',
              'a:has-text("APK")'
            ]);

            if (!download) {
              download = await trySelectors(page, [
                'a:has-text("Click here")',
                'a:has-text("Download APK")',
                'a[href$=".apk"]',
                'a[href*="/file/"]',
                'a[href*="/dl/"]'
              ]);
            }

            if (!download) {
              const hrefs = await page.$$eval('a', as => as.map(a => a.href).filter(Boolean));
              console.log('Scanning candidate links:', hrefs.length);
              const candidates = hrefs.filter(h => /(download|dl|file|apk)/i.test(h));
              for (const h of candidates) {
                try {
                  const resp = await page.request.get(h, { maxRetries: 2, timeout: 60000 });
                  const ct = resp.headers()['content-type'] || '';
                  if (/vnd\.android\.package-archive|application\/octet-stream/i.test(ct)) {
                    const disp = resp.headers()['content-disposition'] || '';
                    let filename = `${pkg}.apk`;
                    const m = /filename\*?=(?:UTF-8'')?"?([^";]+)"?/i.exec(disp);
                    if (m) filename = decodeURIComponent(m[1]);
                    const buf = Buffer.from(await resp.body());
                    const target = path.join(outDir, filename);
                    fs.writeFileSync(target, buf);
                    console.log('Saved (fallback) ->', target, `(${buf.length} bytes)`);
                    await browser.close();
                    process.exit(0);
                  }
                } catch (e) {
                }
              }
              throw new Error('Could not obtain a download link from APKCombo.');
            } else {
              const filename = download.suggestedFilename() || `${pkg}.apk`;
              const targetPath = path.join(outDir, filename);
              await download.saveAs(targetPath);
              console.log('Saved ->', targetPath);
            }

            await browser.close();
          })().catch(err => {
            console.error('[ERROR]', err);
            process.exit(1);
          });
          EOF

          node fetch-apk.js

      - name: Tree
        shell: bash
        run: |
          echo "Project structure:"
          find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'

      - name: List downloaded files
        run: ls -lah "$OUT_DIR"

      - name: Upload artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: ru.oneme.app-apk
          path: ${{ env.OUT_DIR }}/