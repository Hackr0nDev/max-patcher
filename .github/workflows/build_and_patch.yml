name: Build Patched APK

on:
  workflow_dispatch:
    inputs:
      apk_url:
        description: "Direct link to ru.oneme.app.apk (MAX.apk)"
        type: string
        required: true
        default: "https://download.max.ru/android/release/google/MAX.apk"
      permsRemoval:
        description: "Удаление разрешений из манифеста"
        type: choice
        required: true
        default: strict
        options:
          - none
          - dangerous
          - strict
      experimental:
        description: "Включить экспериментальные smali-патчи"
        type: boolean
        required: true
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
      APK_NAME: ru.oneme.app.apk
      OUT_DIR: build/out
      BUILD_DIR: build
      BUILD_TOOLS_VERSION: "35.0.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK (cmdline tools + platform-tools)
        uses: android-actions/setup-android@v3

      - name: Install Android Build-Tools (${{ env.BUILD_TOOLS_VERSION }})
        run: |
          sdkmanager --install "build-tools;${BUILD_TOOLS_VERSION}"
          echo "ZIPALIGN=$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS_VERSION}/zipalign" >> "$GITHUB_ENV"
          echo "APKSIGNER=$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS_VERSION}/apksigner" >> "$GITHUB_ENV"

      - name: Install apktool (wrapper + latest jar)
        run: |
          sudo curl -L -o /usr/local/bin/apktool https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
          sudo curl -L -o /usr/local/bin/apktool.jar https://github.com/iBotPeaches/Apktool/releases/latest/download/apktool.jar
          sudo chmod +x /usr/local/bin/apktool

      - name: Download source APK
        env:
          APK_URL: ${{ inputs.apk_url }}
        run: |
          mkdir -p source_apk
          curl -L "$APK_URL" -o "source_apk/${APK_NAME}"
          ls -lh source_apk
          sha256sum "source_apk/${APK_NAME}" | tee "${{ env.BUILD_DIR }}/apk.sha256"

      - name: Decompile (apktool d)
        run: |
          rm -rf "${OUT_DIR}"
          mkdir -p "${BUILD_DIR}"
          apktool d -f -o "${OUT_DIR}" "source_apk/${APK_NAME}"

      - name: Apply patches (python scripts/patcher.py)
        env:
          permsRemoval: ${{ inputs.permsRemoval }}
          experimental: ${{ inputs.experimental }}
          PERMS_REMOVAL: ${{ inputs.permsRemoval }}   # дублируем, если скрипт читает другое имя
          EXPERIMENTAL: ${{ inputs.experimental }}
        run: |
          python3 --version
          python3 scripts/patcher.py "${OUT_DIR}"

      - name: Build back (apktool b)
        run: |
          apktool b "${OUT_DIR}" -o "${BUILD_DIR}/unsigned.apk"
          ls -lh "${BUILD_DIR}/unsigned.apk"

      - name: Zipalign
        run: |
          "$ZIPALIGN" -v 4 "${BUILD_DIR}/unsigned.apk" "${BUILD_DIR}/aligned.apk"
          ls -lh "${BUILD_DIR}/aligned.apk"

      - name: Generate debug keystore
        run: |
          keytool -genkeypair -keystore "${BUILD_DIR}/debug.keystore" -alias androiddebugkey \
            -storepass android -keypass android -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"

      - name: Sign (apksigner)
        run: |
          "$APKSIGNER" sign --ks "${BUILD_DIR}/debug.keystore" \
            --ks-pass pass:android --key-pass pass:android \
            --out "${BUILD_DIR}/patched-app-release.apk" "${BUILD_DIR}/aligned.apk"
          "$APKSIGNER" verify --print-certs "${BUILD_DIR}/patched-app-release.apk"
          ls -lh "${BUILD_DIR}/patched-app-release.apk"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: patched-app-release
          path: |
            build/patched-app-release.apk
            build/apk.sha256
          retention-days: 14
